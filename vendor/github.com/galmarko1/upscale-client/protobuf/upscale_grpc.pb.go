// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpscaleClient is the client API for Upscale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpscaleClient interface {
	Contribution(ctx context.Context, opts ...grpc.CallOption) (Upscale_ContributionClient, error)
	Opportunity(ctx context.Context, in *OpportunityRequest, opts ...grpc.CallOption) (*OpportunityReply, error)
}

type upscaleClient struct {
	cc grpc.ClientConnInterface
}

func NewUpscaleClient(cc grpc.ClientConnInterface) UpscaleClient {
	return &upscaleClient{cc}
}

func (c *upscaleClient) Contribution(ctx context.Context, opts ...grpc.CallOption) (Upscale_ContributionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Upscale_ServiceDesc.Streams[0], "/protobuf.Upscale/Contribution", opts...)
	if err != nil {
		return nil, err
	}
	x := &upscaleContributionClient{stream}
	return x, nil
}

type Upscale_ContributionClient interface {
	Send(*ContributionRequest) error
	CloseAndRecv() (*ContributionReply, error)
	grpc.ClientStream
}

type upscaleContributionClient struct {
	grpc.ClientStream
}

func (x *upscaleContributionClient) Send(m *ContributionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upscaleContributionClient) CloseAndRecv() (*ContributionReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ContributionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upscaleClient) Opportunity(ctx context.Context, in *OpportunityRequest, opts ...grpc.CallOption) (*OpportunityReply, error) {
	out := new(OpportunityReply)
	err := c.cc.Invoke(ctx, "/protobuf.Upscale/Opportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpscaleServer is the server API for Upscale service.
// All implementations must embed UnimplementedUpscaleServer
// for forward compatibility
type UpscaleServer interface {
	Contribution(Upscale_ContributionServer) error
	Opportunity(context.Context, *OpportunityRequest) (*OpportunityReply, error)
	mustEmbedUnimplementedUpscaleServer()
}

// UnimplementedUpscaleServer must be embedded to have forward compatible implementations.
type UnimplementedUpscaleServer struct {
}

func (UnimplementedUpscaleServer) Contribution(Upscale_ContributionServer) error {
	return status.Errorf(codes.Unimplemented, "method Contribution not implemented")
}
func (UnimplementedUpscaleServer) Opportunity(context.Context, *OpportunityRequest) (*OpportunityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Opportunity not implemented")
}
func (UnimplementedUpscaleServer) mustEmbedUnimplementedUpscaleServer() {}

// UnsafeUpscaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpscaleServer will
// result in compilation errors.
type UnsafeUpscaleServer interface {
	mustEmbedUnimplementedUpscaleServer()
}

func RegisterUpscaleServer(s grpc.ServiceRegistrar, srv UpscaleServer) {
	s.RegisterService(&Upscale_ServiceDesc, srv)
}

func _Upscale_Contribution_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpscaleServer).Contribution(&upscaleContributionServer{stream})
}

type Upscale_ContributionServer interface {
	SendAndClose(*ContributionReply) error
	Recv() (*ContributionRequest, error)
	grpc.ServerStream
}

type upscaleContributionServer struct {
	grpc.ServerStream
}

func (x *upscaleContributionServer) SendAndClose(m *ContributionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upscaleContributionServer) Recv() (*ContributionRequest, error) {
	m := new(ContributionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upscale_Opportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpscaleServer).Opportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Upscale/Opportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpscaleServer).Opportunity(ctx, req.(*OpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Upscale_ServiceDesc is the grpc.ServiceDesc for Upscale service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Upscale_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Upscale",
	HandlerType: (*UpscaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Opportunity",
			Handler:    _Upscale_Opportunity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Contribution",
			Handler:       _Upscale_Contribution_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upscale.proto",
}
